
------------------------
Looking for source files
------------------------

Found: malloc.c

-----------------------
Looking for a Makefile
----------------------

Found: Makefile

--------------------------------
Checking for long lines (no program should have any lines > 80 chars)
--------------------------------

Line length ok.


------------------------------------
Building the application: "make intel-all"
------------------------------------

make intel-all
make: Nothing to be done for `intel-all'.

---------------
checking for libraries
---------------


--------------------------------------------------------
Test Results:
   These are the results of trying your libraries
against several programs with different characteristics 
described by the filename.  The output of your program
is compared to a reference output using diff(1).  If they
differ, the test case is a failure.

  Remember, if the machine you're running on _really_ 
runs out of memory, it's possible for a test to fail
without it being your program's fault.  (there'd better
be a good error message, though)


Testing (failure details below):
        -----
         1) Linking (only) against required routines        () ... ok.
         2) Call malloc() once without using the returned (32) ... ok.
         3) Call malloc() once without using the returned (64) ... ok.
         4) Call malloc() once, using the space once      (32) ... ok.
         5) Call malloc() once, using the space once      (64) ... ok.
         6) Call malloc() a few times                     (32) ... FAILURE.
         7) Call malloc() a few times                     (64) ... FAILURE.
         8) Call malloc() a lot of times                  (32) ... FAILURE.
         9) Call malloc() a lot of times                  (64) ... FAILURE.
        10) Call realloc(NULL) once, using the space      (32) ... ok.
        11) Call realloc(NULL) once, using the space      (64) ... ok.
        12) Call realloc(NULL) a few times                (32) ... FAILURE.
        13) Call realloc(NULL) a few times                (64) ... FAILURE.
        14) Call malloc(), then free the memory           (32) ... FAILURE.
        15) Call malloc(), then free the memory           (64) ... FAILURE.
        16) Call malloc() a few times then free all the r (32) ... FAILURE.
        17) Call malloc() a few times then free all the r (64) ... FAILURE.
        18) Call malloc(), then realloc()                 (32) ... FAILURE.
        19) Call malloc(), then realloc()                 (64) ... FAILURE.
        20) Alternate malloc()s and realloc()s            (32) ... FAILURE.
        21) Alternate malloc()s and realloc()s            (64) ... FAILURE.
        22) Call calloc() and use it.                     (32) ... ok.
        23) Call calloc() and use it.                     (64) ... ok.
        24) Call calloc() for various sizes and test      (32) ... FAILURE.
        25) Call calloc() for various sizes and test      (64) ... FAILURE.
        26) Call malloc() and free() 10000000 times       (32) ... FAILURE.
        27) Call malloc() and free() 10000000 times       (64) ... FAILURE.
        28) Call malloc for a biiiiig (2^24) value        (32) ... FAILURE.
        29) Call malloc for a biiiiig (2^24) value        (64) ... FAILURE.
        30) Check the alignment of malloc()'s results     (32) ... FAILURE.
        31) Check the alignment of malloc()'s results     (64) ... FAILURE.
        32) Malloc(), then free an internal pointer       (32) ... FAILURE.
        33) Malloc(), then free an internal pointer       (64) ... FAILURE.
        34) Repeatedly malloc(), free an internal pointer (32) ... FAILURE.
        35) Repeatedly malloc(), free an internal pointer (64) ... FAILURE.
        36) Free(NULL) a bunch then malloc()              (32) ... ok.
        37) Free(NULL) a bunch then malloc()              (64) ... ok.
        38) check realloc(NULL,size) equiv. malloc(size)  (32) ... FAILURE.
        39) check realloc(NULL,size) equiv. malloc(size)  (64) ... FAILURE.
        40) Call malloc() and realloc(ptr,0) 10000000 tim (32) ... FAILURE.
        41) Call malloc() and realloc(ptr,0) 10000000 tim (64) ... FAILURE.
        42) A realloc() that should not move the buffer   (32) ... FAILURE.
        43) A realloc() that should not move the buffer   (64) ... FAILURE.
        44) A realloc() that shrinks the buffer           (32) ... FAILURE.
        45) A realloc() that shrinks the buffer           (64) ... FAILURE.
        46) A realloc() forced to move buffer             (32) ... FAILURE.
        47) A realloc() forced to move buffer             (64) ... FAILURE.
        -----
FAILURE. (11/47 passed)


-----------------------------------------------------------------
Failure Details
-----------------------------------------------------------------
=================================================
TEST 6 (32-bit): Call malloc() a few times

Test malloc() to see if it can properly allocate a few regions.
=================================================

----------
Reference:
----------
stdout:
  Allocating a region of size 0...ok.
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Allocating a region of size 0...ok.
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 7 (64-bit): Call malloc() a few times

Test malloc() to see if it can properly allocate a few regions.
=================================================

----------
Reference:
----------
stdout:
  Allocating a region of size 0...ok.
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Allocating a region of size 0...ok.
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 8 (32-bit): Call malloc() a lot of times

Test malloc() to see if it can properly allocate many regions.
=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 0..8191...ok.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrChild process (11213) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Allocating 8192 regions, size 0..8191...ok.
---------
=================================================
TEST 9 (64-bit): Call malloc() a lot of times

Test malloc() to see if it can properly allocate many regions.
=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 0..8191...ok.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrChild process (11248) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Allocating 8192 regions, size 0..8191...ok.
---------
=================================================
TEST 12 (32-bit): Call realloc(NULL) a few times

=================================================

----------
Reference:
----------
stdout:
  Allocating a region of size 0...ok.
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Allocating a region of size 0...ok.
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 13 (64-bit): Call realloc(NULL) a few times

=================================================

----------
Reference:
----------
stdout:
  Allocating a region of size 0...ok.
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Allocating a region of size 0...ok.
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 14 (32-bit): Call malloc(), then free the memory 

=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  We survived the free call.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  We survived the free call.
stderr:
  Cant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 15 (64-bit): Call malloc(), then free the memory 

=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  We survived the free call.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  We survived the free call.
stderr:
  Cant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 16 (32-bit): Call malloc() a few times then free all the regions

=================================================

----------
Reference:
----------
stdout:
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
  Allocating a region of size 2500...ok.
  Free ok. Checking remaining regions...(ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.)
  Free ok. Checking remaining regions...(ok.)
  Free ok. Checking remaining regions...()
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
  Allocating a region of size 2500...ok.
  Free ok. Checking remaining regions...(ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.)
  Free ok. Checking remaining regions...(ok.)
  Free ok. Checking remaining regions...()
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 17 (64-bit): Call malloc() a few times then free all the regions

=================================================

----------
Reference:
----------
stdout:
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
  Allocating a region of size 2500...ok.
  Free ok. Checking remaining regions...(ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.)
  Free ok. Checking remaining regions...(ok.)
  Free ok. Checking remaining regions...()
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
  Allocating a region of size 2500...ok.
  Free ok. Checking remaining regions...(ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.)
  Free ok. Checking remaining regions...(ok.)
  Free ok. Checking remaining regions...()
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 18 (32-bit): Call malloc(), then realloc()
=================================================

----------
Reference:
----------
stdout:
  ok.
  Contents ok after realloc.
  Fill of reallocated space ok.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  ok.
  Contents DIFFER after realloc.
  Fill of reallocated space ok.
Submitted produced no error output.

---------------------------------
Differences (< reference > output)
---------------------------------

  2c2
  < Contents ok after realloc.
  ---
  > Contents DIFFER after realloc.
---------
=================================================
TEST 19 (64-bit): Call malloc(), then realloc()
=================================================

----------
Reference:
----------
stdout:
  ok.
  Contents ok after realloc.
  Fill of reallocated space ok.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  ok.
  Contents DIFFER after realloc.
  Fill of reallocated space ok.
Submitted produced no error output.

---------------------------------
Differences (< reference > output)
---------------------------------

  2c2
  < Contents ok after realloc.
  ---
  > Contents DIFFER after realloc.
---------
=================================================
TEST 20 (32-bit): Alternate malloc()s and realloc()s

This will force realloc() to move periodically

=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 1..8192...ok.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Allocating 8192 regions, size 1..8192......contents not properly copied...FAILED.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

  1c1
  < Allocating 8192 regions, size 1..8192...ok.
  ---
  > Allocating 8192 regions, size 1..8192......contents not properly copied...FAILED.
---------
=================================================
TEST 21 (64-bit): Alternate malloc()s and realloc()s

This will force realloc() to move periodically

=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 1..8192...ok.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Allocating 8192 regions, size 1..8192......contents not properly copied...FAILED.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

  1c1
  < Allocating 8192 regions, size 1..8192...ok.
  ---
  > Allocating 8192 regions, size 1..8192......contents not properly copied...FAILED.
---------
=================================================
TEST 24 (32-bit): Call calloc() for various sizes and test


=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 1..8192...ok.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrChild process (11598) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Allocating 8192 regions, size 1..8192...ok.
---------
=================================================
TEST 25 (64-bit): Call calloc() for various sizes and test


=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 1..8192...ok.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrChild process (11626) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Allocating 8192 regions, size 1..8192...ok.
---------
=================================================
TEST 26 (32-bit): Call malloc() and free() 10000000 times

Make sure that these programs aren't just leaking memory like
the proverbial sieve.
=================================================

----------
Reference:
----------
stdout:
  Starting looping...Well, we didn't crash.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrTimed out.
  Child process (11653) exited due to signal (Terminated).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Starting looping...Well, we didn't crash.
---------
=================================================
TEST 27 (64-bit): Call malloc() and free() 10000000 times

Make sure that these programs aren't just leaking memory like
the proverbial sieve.
=================================================

----------
Reference:
----------
stdout:
  Starting looping...Well, we didn't crash.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrTimed out.
  Child process (11932) exited due to signal (Terminated).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Starting looping...Well, we didn't crash.
---------
=================================================
TEST 28 (32-bit): Call malloc for a biiiiig (2^24) value

See if malloc can handle large values.
=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Child process (12274) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1,2d0
  < Calling malloc succeeded.
  < Successfully used the space.
---------
=================================================
TEST 29 (64-bit): Call malloc for a biiiiig (2^24) value

See if malloc can handle large values.
=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Child process (12301) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1,2d0
  < Calling malloc succeeded.
  < Successfully used the space.
---------
=================================================
TEST 30 (32-bit): Check the alignment of malloc()'s results

Call malloc() a lot of times with different sizes and see if they all
come back aligned.
=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 0..8191...ok.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrChild process (12331) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Allocating 8192 regions, size 0..8191...ok.
---------
=================================================
TEST 31 (64-bit): Check the alignment of malloc()'s results

Call malloc() a lot of times with different sizes and see if they all
come back aligned.
=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 0..8191...ok.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrChild process (12365) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Allocating 8192 regions, size 0..8191...ok.
---------
=================================================
TEST 32 (32-bit): Malloc(), then free an internal pointer


=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Allocated 1024 bytes.  Freeing val+512.
  We survived the free call.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Allocated 1024 bytes.  Freeing val+512.
  We survived the free call.
stderr:
  Cant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 33 (64-bit): Malloc(), then free an internal pointer


=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Allocated 1024 bytes.  Freeing val+512.
  We survived the free call.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Allocated 1024 bytes.  Freeing val+512.
  We survived the free call.
stderr:
  Cant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

---------
=================================================
TEST 34 (32-bit): Repeatedly malloc(), free an internal pointer


=================================================

----------
Reference:
----------
stdout:
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
  Allocating a region of size 2500...ok.
  Allocating a region of size 3000...ok.
  Allocating a region of size 3500...ok.
  Allocating a region of size 4000...ok.
  Allocating a region of size 4500...ok.
  Allocating a region of size 5000...ok.
  Allocating a region of size 5500...ok.
  Allocating a region of size 6000...ok.
  Allocating a region of size 6500...ok.
  Allocating a region of size 7000...ok.
  Allocating a region of size 7500...ok.
  Allocating a region of size 8000...ok.
  Allocating a region of size 8500...ok.
  Allocating a region of size 9000...ok.
  Allocating a region of size 9500...ok.
  Allocating a region of size 10000...ok.
  Allocating a region of size 10500...ok.
  Allocating a region of size 11000...ok.
  Allocating a region of size 11500...ok.
  Allocating a region of size 12000...ok.
  Allocating a region of size 12500...ok.
  Allocating a region of size 13000...ok.
  Allocating a region of size 13500...ok.
  Allocating a region of size 14000...ok.
  Allocating a region of size 14500...ok.
  Allocating a region of size 15000...ok.
  Allocating a region of size 15500...ok.
  Allocating a region of size 16000...ok.
  Allocating a region of size 16500...ok.
  Allocating a region of size 17000...ok.
  Allocating a region of size 17500...ok.
  Allocating a region of size 18000...ok.
  Allocating a region of size 18500...ok.
  Allocating a region of size 19000...ok.
  Allocating a region of size 19500...ok.
  Allocating a region of size 20000...ok.
  Allocating a region of size 20500...ok.
  Allocating a region of size 21000...ok.
  Allocating a region of size 21500...ok.
  Allocating a region of size 22000...ok.
  Allocating a region of size 22500...ok.
  Allocating a region of size 23000...ok.
  Allocating a region of size 23500...ok.
  Allocating a region of size 24000...ok.
  Allocating a region of size 24500...ok.
  Allocating a region of size 25000...ok.
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.)
  Free ok. Checking remaining regions...(ok.)
  Free ok. Checking remaining regions...()
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrChild process (12449) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1,100d0
  < Allocating a region of size 500...ok.
  < Allocating a region of size 1000...ok.
  < Allocating a region of size 1500...ok.
  < Allocating a region of size 2000...ok.
  < Allocating a region of size 2500...ok.
  < Allocating a region of size 3000...ok.
  < Allocating a region of size 3500...ok.
  < Allocating a region of size 4000...ok.
  < Allocating a region of size 4500...ok.
  < Allocating a region of size 5000...ok.
  < Allocating a region of size 5500...ok.
  < Allocating a region of size 6000...ok.
  < Allocating a region of size 6500...ok.
  < Allocating a region of size 7000...ok.
  < Allocating a region of size 7500...ok.
  < Allocating a region of size 8000...ok.
  < Allocating a region of size 8500...ok.
  < Allocating a region of size 9000...ok.
  < Allocating a region of size 9500...ok.
  < Allocating a region of size 10000...ok.
  < Allocating a region of size 10500...ok.
  < Allocating a region of size 11000...ok.
  < Allocating a region of size 11500...ok.
  < Allocating a region of size 12000...ok.
  < Allocating a region of size 12500...ok.
  < Allocating a region of size 13000...ok.
  < Allocating a region of size 13500...ok.
  < Allocating a region of size 14000...ok.
  < Allocating a region of size 14500...ok.
  < Allocating a region of size 15000...ok.
  < Allocating a region of size 15500...ok.
  < Allocating a region of size 16000...ok.
  < Allocating a region of size 16500...ok.
  < Allocating a region of size 17000...ok.
  < Allocating a region of size 17500...ok.
  < Allocating a region of size 18000...ok.
  < Allocating a region of size 18500...ok.
  < Allocating a region of size 19000...ok.
  < Allocating a region of size 19500...ok.
  < Allocating a region of size 20000...ok.
  < Allocating a region of size 20500...ok.
  < Allocating a region of size 21000...ok.
  < Allocating a region of size 21500...ok.
  < Allocating a region of size 22000...ok.
  < Allocating a region of size 22500...ok.
  < Allocating a region of size 23000...ok.
  < Allocating a region of size 23500...ok.
  < Allocating a region of size 24000...ok.
  < Allocating a region of size 24500...ok.
  < Allocating a region of size 25000...ok.
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.)
  < Free ok. Checking remaining regions...(ok.)
  < Free ok. Checking remaining regions...()
---------
=================================================
TEST 35 (64-bit): Repeatedly malloc(), free an internal pointer


=================================================

----------
Reference:
----------
stdout:
  Allocating a region of size 500...ok.
  Allocating a region of size 1000...ok.
  Allocating a region of size 1500...ok.
  Allocating a region of size 2000...ok.
  Allocating a region of size 2500...ok.
  Allocating a region of size 3000...ok.
  Allocating a region of size 3500...ok.
  Allocating a region of size 4000...ok.
  Allocating a region of size 4500...ok.
  Allocating a region of size 5000...ok.
  Allocating a region of size 5500...ok.
  Allocating a region of size 6000...ok.
  Allocating a region of size 6500...ok.
  Allocating a region of size 7000...ok.
  Allocating a region of size 7500...ok.
  Allocating a region of size 8000...ok.
  Allocating a region of size 8500...ok.
  Allocating a region of size 9000...ok.
  Allocating a region of size 9500...ok.
  Allocating a region of size 10000...ok.
  Allocating a region of size 10500...ok.
  Allocating a region of size 11000...ok.
  Allocating a region of size 11500...ok.
  Allocating a region of size 12000...ok.
  Allocating a region of size 12500...ok.
  Allocating a region of size 13000...ok.
  Allocating a region of size 13500...ok.
  Allocating a region of size 14000...ok.
  Allocating a region of size 14500...ok.
  Allocating a region of size 15000...ok.
  Allocating a region of size 15500...ok.
  Allocating a region of size 16000...ok.
  Allocating a region of size 16500...ok.
  Allocating a region of size 17000...ok.
  Allocating a region of size 17500...ok.
  Allocating a region of size 18000...ok.
  Allocating a region of size 18500...ok.
  Allocating a region of size 19000...ok.
  Allocating a region of size 19500...ok.
  Allocating a region of size 20000...ok.
  Allocating a region of size 20500...ok.
  Allocating a region of size 21000...ok.
  Allocating a region of size 21500...ok.
  Allocating a region of size 22000...ok.
  Allocating a region of size 22500...ok.
  Allocating a region of size 23000...ok.
  Allocating a region of size 23500...ok.
  Allocating a region of size 24000...ok.
  Allocating a region of size 24500...ok.
  Allocating a region of size 25000...ok.
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.ok.)
  Free ok. Checking remaining regions...(ok.ok.)
  Free ok. Checking remaining regions...(ok.)
  Free ok. Checking remaining regions...()
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrCant free ptrChild process (12476) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1,100d0
  < Allocating a region of size 500...ok.
  < Allocating a region of size 1000...ok.
  < Allocating a region of size 1500...ok.
  < Allocating a region of size 2000...ok.
  < Allocating a region of size 2500...ok.
  < Allocating a region of size 3000...ok.
  < Allocating a region of size 3500...ok.
  < Allocating a region of size 4000...ok.
  < Allocating a region of size 4500...ok.
  < Allocating a region of size 5000...ok.
  < Allocating a region of size 5500...ok.
  < Allocating a region of size 6000...ok.
  < Allocating a region of size 6500...ok.
  < Allocating a region of size 7000...ok.
  < Allocating a region of size 7500...ok.
  < Allocating a region of size 8000...ok.
  < Allocating a region of size 8500...ok.
  < Allocating a region of size 9000...ok.
  < Allocating a region of size 9500...ok.
  < Allocating a region of size 10000...ok.
  < Allocating a region of size 10500...ok.
  < Allocating a region of size 11000...ok.
  < Allocating a region of size 11500...ok.
  < Allocating a region of size 12000...ok.
  < Allocating a region of size 12500...ok.
  < Allocating a region of size 13000...ok.
  < Allocating a region of size 13500...ok.
  < Allocating a region of size 14000...ok.
  < Allocating a region of size 14500...ok.
  < Allocating a region of size 15000...ok.
  < Allocating a region of size 15500...ok.
  < Allocating a region of size 16000...ok.
  < Allocating a region of size 16500...ok.
  < Allocating a region of size 17000...ok.
  < Allocating a region of size 17500...ok.
  < Allocating a region of size 18000...ok.
  < Allocating a region of size 18500...ok.
  < Allocating a region of size 19000...ok.
  < Allocating a region of size 19500...ok.
  < Allocating a region of size 20000...ok.
  < Allocating a region of size 20500...ok.
  < Allocating a region of size 21000...ok.
  < Allocating a region of size 21500...ok.
  < Allocating a region of size 22000...ok.
  < Allocating a region of size 22500...ok.
  < Allocating a region of size 23000...ok.
  < Allocating a region of size 23500...ok.
  < Allocating a region of size 24000...ok.
  < Allocating a region of size 24500...ok.
  < Allocating a region of size 25000...ok.
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.ok.)
  < Free ok. Checking remaining regions...(ok.ok.)
  < Free ok. Checking remaining regions...(ok.)
  < Free ok. Checking remaining regions...()
---------
=================================================
TEST 38 (32-bit): check realloc(NULL,size) equiv. malloc(size)

Test realloc(NULL,size) to see if it can properly allocate many regions.
=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 0..8191...ok.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrChild process (12538) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Allocating 8192 regions, size 0..8191...ok.
---------
=================================================
TEST 39 (64-bit): check realloc(NULL,size) equiv. malloc(size)

Test realloc(NULL,size) to see if it can properly allocate many regions.
=================================================

----------
Reference:
----------
stdout:
  Allocating 8192 regions, size 0..8191...ok.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrChild process (12566) exited due to signal (Segmentation fault).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Allocating 8192 regions, size 0..8191...ok.
---------
=================================================
TEST 40 (32-bit): Call malloc() and realloc(ptr,0) 10000000 times

realloc(ptr,0) should act as free(ptr)

=================================================

----------
Reference:
----------
stdout:
  Starting looping...Well, we didn't crash.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrTimed out.
  Child process (12593) exited due to signal (Terminated).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Starting looping...Well, we didn't crash.
---------
=================================================
TEST 41 (64-bit): Call malloc() and realloc(ptr,0) 10000000 times

realloc(ptr,0) should act as free(ptr)

=================================================

----------
Reference:
----------
stdout:
  Starting looping...Well, we didn't crash.
Reference produced no error output.
----------
Submitted:
----------
Submitted produced no standard output.
stderr:
  Cant free ptrCant free ptrCant free ptrCant free ptrTimed out.
  Child process (12657) exited due to signal (Terminated).

---------------------------------
Differences (< reference > output)
---------------------------------

  1d0
  < Starting looping...Well, we didn't crash.
---------
=================================================
TEST 42 (32-bit): A realloc() that should not move the buffer


=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Realloc unexpectedly moved the buffer old 0x9b6e010 != new 0x9b6e420.
  Some values were not properly copied.
stderr:
  Cant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

  2a3,4
  > Realloc unexpectedly moved the buffer old 0x9b6e010 != new 0x9b6e420.
  > Some values were not properly copied.
---------
=================================================
TEST 43 (64-bit): A realloc() that should not move the buffer


=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Realloc unexpectedly moved the buffer old 0x1793020 != new 0x1793440.
  Some values were not properly copied.
stderr:
  Cant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

  2a3,4
  > Realloc unexpectedly moved the buffer old 0x1793020 != new 0x1793440.
  > Some values were not properly copied.
---------
=================================================
TEST 44 (32-bit): A realloc() that shrinks the buffer


=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Realloc unexpectedly moved the buffer old 0x977e820 != new 0x977f840.
  Some values were not properly copied.
stderr:
  Cant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

  6a7,8
  > Realloc unexpectedly moved the buffer old 0x977e820 != new 0x977f840.
  > Some values were not properly copied.
---------
=================================================
TEST 45 (64-bit): A realloc() that shrinks the buffer


=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Realloc unexpectedly moved the buffer old 0x230b840 != new 0x230c880.
  Some values were not properly copied.
stderr:
  Cant free ptrCant free ptr
---------------------------------
Differences (< reference > output)
---------------------------------

  6a7,8
  > Realloc unexpectedly moved the buffer old 0x230b840 != new 0x230c880.
  > Some values were not properly copied.
---------
=================================================
TEST 46 (32-bit): A realloc() forced to move buffer
=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Some values were not properly copied.
Submitted produced no error output.

---------------------------------
Differences (< reference > output)
---------------------------------

  6a7
  > Some values were not properly copied.
---------
=================================================
TEST 47 (64-bit): A realloc() forced to move buffer
=================================================

----------
Reference:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
Reference produced no error output.
----------
Submitted:
----------
stdout:
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Calling malloc succeeded.
  Successfully used the space.
  Some values were not properly copied.
Submitted produced no error output.

---------------------------------
Differences (< reference > output)
---------------------------------

  6a7
  > Some values were not properly copied.
---------
